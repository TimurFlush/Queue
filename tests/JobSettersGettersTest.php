<?php

namespace TimurFlush\Queue\Tests;

use Phalcon\Di;
use Phalcon\Events\Manager;
use Phalcon\Queue\Beanstalk;
use PHPUnit\Framework\TestCase;
use TimurFlush\Queue\Adapter\Blackhole;
use TimurFlush\Queue\Job;
use TimurFlush\Queue\Tests\Jobs\TestJob;

class JobSettersGettersTest extends TestCase
{
    /**
     * @var \TimurFlush\Queue\Job
     */
    protected $job;

    public function setUp()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->job = new TestJob();
    }
    
    public function testJobName()
    {
        $job = $this->job;
        $jobName = 'someJob';
        $job->setJobName($jobName);
        $this->assertEquals($jobName, $job->getJobName(),
            sprintf('The value is: %s, expected: %s .', $job->getJobName(), $jobName)
        );
    }

    public function testDI()
    {
        $job = $this->job;
        $di = new Di();
        $job->setDI($di);
        $this->assertEquals($di, $job->getDI(), 'setDI()/getDI() is not working.');
    }

    public function testEventsManager()
    {
        $job = $this->job;
        $manager = new Manager();
        $job->setEventsManager($manager);
        $this->assertEquals($manager, $job->getEventsManager(), 'setEventsManager()/getEventsManager() is not working.');
    }

    public function testConnection()
    {
        $job = $this->job;
        $adapter = new Blackhole();
        $job->setConnection($adapter);
        $this->assertEquals($adapter, $job->getConnection(), 'setConnection()/getConnection() is not working.');
    }
    
    public function testGetTotalJobsInQueue()
    {
        $job = $this->job;
        $job->setConnection(new Blackhole());
        $total = 0;
        $this->assertEquals($total, $job->getTotalJobsInQueue(), 'getTotalJobsInQueue() is not working.');
    }
    
    public function testGetNextJob()
    {
        $job = $this->job;
        $job->setConnection(new Blackhole());
        $nextJob = null;
        $this->assertEquals($nextJob, $job->getNextJob(), 'getNextJob() is not working.');
    }

    public function testOperationMade()
    {
        $job = $this->job;

        $operation = Job::OP_SEND;
        $job->setOperationMade($operation);
        $this->assertEquals($operation, $job->getOperationMade(), 'setOperationMade/getOperationMade() is not working.');
        
        $operation = Job::OP_DELETE;
        $job->setOperationMade($operation);
        $this->assertEquals($operation, $job->getOperationMade(), 'setOperationMade/getOperationMade() is not working.');

        $operation = Job::OP_RELEASE;
        $job->setOperationMade($operation);
        $this->assertEquals($operation, $job->getOperationMade(), 'setOperationMade/getOperationMade() is not working.');
    }


    
    public function tearDown()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        unset($this->job);
    }
}