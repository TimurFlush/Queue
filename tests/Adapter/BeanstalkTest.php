<?php

namespace TimurFlush\Queue\Tests\Adapter;

use Pheanstalk\Job;
use PHPUnit\Framework\TestCase;
use TimurFlush\Queue\Adapter\Beanstalk;
use TimurFlush\Queue\AdapterInterface;
use TimurFlush\Queue\Exception;
use TimurFlush\Queue\Tests\Jobs\TestJob;

class BeanstalkTest extends TestCase
{
    /**
     * @const string
     */
    const DEFAULT_HOST = '127.0.0.1';

    /**
     * @const string
     */
    const DEFAULT_PORT = '11300';

    /**
     * @var \TimurFlush\Queue\Adapter\Beanstalk
     */
    protected $beanstalk = null;

    public function setUp()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->beanstalk = new Beanstalk(
            [
                'host' => self::DEFAULT_HOST,
                'port' => self::DEFAULT_PORT,
            ]
        );
    }

    public function testConnect()
    {
        $beanstalk = &$this->beanstalk;

        $this->assertTrue($beanstalk->connect(), 'connect() is not working.');
    }

    public function testDisconnect()
    {
        $beanstalk = &$this->beanstalk;

        $this->assertTrue($beanstalk->disconnect(), 'disconnect() is not working.');
    }

    public function testChooseQueue()
    {
        $beanstalk = &$this->beanstalk;
        $this->assertTrue($beanstalk->chooseQueue('someQueue'), 'chooseQueue() is not working.');
    }

    public function testWatchQueue()
    {
        $beanstalk = &$this->beanstalk;
        $this->assertTrue($beanstalk->watchQueue('someQueue'), 'watchQueue) is not working.');
    }

    public function testSend()
    {
        $beanstalk = &$this->beanstalk;
        $job = $beanstalk->send(['someText'], $this->getQueueName(__METHOD__));

        $this->assertTrue(is_int($job), 'send() is not working.');
    }

    public function testPut()
    {
        $beanstalk = &$this->beanstalk;

        //variant 1
        $beanstalk->chooseQueue($this->getQueueName(__METHOD__));
        $job = $beanstalk->put(['someText']);

        $this->assertInstanceOf(Job::class, $job, 'put() is not working.');

        //variant 2
        $beanstalk->chooseQueue($this->getQueueName(__METHOD__));
        $job = $beanstalk->put(
            ['someText'],
            [
                'ttr' => 15,
                'delay' => 5,
                'priority' => 5,
            ]
        );

        $this->assertInstanceOf(Job::class, $job, 'put() is not working.');
    }

    public function testGetTotalJobsInQueueAndStatsTube()
    {
        $beanstalk = &$this->beanstalk;

        $beanstalk->chooseQueue($this->getQueueName(__METHOD__));
        $beanstalk->put(['someText']);

        $this->assertEquals(1, $beanstalk->getTotalJobsInQueue($this->getQueueName(__METHOD__)), 'getTotalJobsInQueue() is not working.');
        $this->assertEquals(1, $beanstalk->statsTube($this->getQueueName(__METHOD__))->total_jobs, 'getStatsTube() is not working.');
    }

    public function testDelete()
    {
        $beanstalk = &$this->beanstalk;

        $beanstalk->chooseQueue($this->getQueueName(__METHOD__));
        $job = $beanstalk->put(['someText']);
        $this->assertTrue($beanstalk->delete($job->getId()), 'delete() is not working.');
    }

    public function testReserve()
    {
        $beanstalk = &$this->beanstalk;

        $beanstalk->chooseQueue($this->getQueueName(__METHOD__));
        $job = $beanstalk->put(['someText']);

        $beanstalk->watchQueue($this->getQueueName(__METHOD__));
        $reserve = $beanstalk->reserve(0);
        $this->assertEquals($job->getId(), $reserve->getId(), 'reserve() is not working.');
        $beanstalk->delete($reserve->getId());
    }

    public function testBury()
    {
        $beanstalk = &$this->beanstalk;

        //variant 1
        $beanstalk->chooseQueue($this->getQueueName(__METHOD__));
        $job = $beanstalk->put(['someText']);

        $beanstalk->watchQueue($this->getQueueName(__METHOD__));
        $reserve = $beanstalk->reserve(0);
        $this->assertEquals($job->getId(), $reserve->getId(), 'reserve() is not working.');

        $this->assertTrue($beanstalk->bury($reserve->getId()), 'bury() is not working.');
        $beanstalk->delete($reserve->getId());

        //variant 2
        $beanstalk->chooseQueue($this->getQueueName(__METHOD__));
        $job = $beanstalk->put(['someText']);

        $beanstalk->watchQueue($this->getQueueName(__METHOD__));
        $reserve = $beanstalk->reserve(0);
        $this->assertEquals($job->getId(), $reserve->getId(), 'reserve() is not working.');

        $this->assertTrue($beanstalk->bury($reserve->getId(), 15), 'bury() is not working.');
        $beanstalk->delete($reserve->getId());
    }

    public function testKickJob()
    {
        $beanstalk = &$this->beanstalk;

        $beanstalk->chooseQueue($this->getQueueName(__METHOD__));
        $job = $beanstalk->put(['someText']);

        $beanstalk->watchQueue($this->getQueueName(__METHOD__));
        $reserve = $beanstalk->reserve(0);
        $this->assertEquals($job->getId(), $reserve->getId(), 'reserve() is not working.');

        $this->assertTrue($beanstalk->bury($reserve->getId()), 'bury() is not working.');
        $this->assertTrue($beanstalk->kickJob($reserve->getId()), 'kickJob() is not working.');
        $beanstalk->delete($reserve->getId());
    }

    public function testRelease()
    {
        $beanstalk = &$this->beanstalk;

        $beanstalk->chooseQueue($this->getQueueName(__METHOD__));
        $job = $beanstalk->put(['someText']);

        $beanstalk->watchQueue($this->getQueueName(__METHOD__));
        $reserve = $beanstalk->reserve(0);
        $this->assertEquals($job->getId(), $reserve->getId(), 'reserve() is not working.');
        $this->assertTrue($beanstalk->release($reserve->getId()), 'release() is not working.');
        $beanstalk->delete($reserve->getId());
    }

    public function testGetNextJob()
    {
        $beanstalk = &$this->beanstalk;

        //variant 1
        $this->assertNull(
            $beanstalk->getNextJob(
                $this->getQueueName(__METHOD__)
            )
        );

        //variant 2
        $jobId = $beanstalk->send(
            new TestJob(),
            $this->getQueueName(__METHOD__)
        );

        $nextJob = $beanstalk->getNextJob($this->getQueueName(__METHOD__));
        $this->assertEquals($jobId, $nextJob->getJobId(), 'getNextJob() is not working.');
        $beanstalk->delete($nextJob->getJobId());

        //variant 3
        $jobId = $beanstalk->send(
            ['lolkekcheburek'],
            $this->getQueueName(__METHOD__)
        );

        $this->expectException(Exception::class);
        $beanstalk->getNextJob($this->getQueueName(__METHOD__));
    }

    public function getQueueName(string $method)
    {
        static $array = [];

        $method = explode('::', $method, 2);
        if (isset($array[$method[1]])) {
            return $method[1]  . $array[$method[1]];
        }

        $array[$method[1]] = microtime(true);
        return $method[1]  . $array[$method[1]];
    }

    public function testSetPriority()
    {
        $beanstalk = &$this->beanstalk;

        //variant 1
        $this->assertInstanceOf(AdapterInterface::class, $beanstalk->setPriority(15), 'setPriority() is not working.');

        //variant 2
        $this->expectException(Exception::class);
        $beanstalk->setPriority(-1);
    }

    public function testSetDelay()
    {
        $beanstalk = &$this->beanstalk;

        //variant 1
        $this->assertInstanceOf(AdapterInterface::class, $beanstalk->setDelay(15), 'setDelay() is not working.');

        //variant 2
        $this->expectException(Exception::class);
        $beanstalk->setDelay(-1);
    }

    public function testSetTimeToRub()
    {
        $beanstalk = &$this->beanstalk;

        //variant 1
        $this->assertInstanceOf(AdapterInterface::class, $beanstalk->setTimeToRun(15), 'setTimeToRun() is not working.');

        //variant 2
        $this->expectException(Exception::class);
        $beanstalk->setTimeToRun(-1);
    }

    public function testSetGetQueue()
    {
        $beanstalk = &$this->beanstalk;

        //variant 1
        $beanstalk->setQueue('someQueue');
        $this->assertEquals('someQueue', $beanstalk->getQueue(), 'setQueue()/getQueue() is not working.');

        //variant 2
        $this->expectException(Exception::class);
        $beanstalk->setQueue('');
    }

    public function tearDown()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}