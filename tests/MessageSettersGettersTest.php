<?php

namespace TimurFlush\Queue\Tests;

use PHPUnit\Framework\TestCase;
use TimurFlush\Queue\JobInterface;
use TimurFlush\Queue\Message;
use Mockery as m;

class MessageSettersGettersTest extends TestCase
{
    /**
     * @var \TimurFlush\Queue\MessageInterface
     */
    protected $message = null;

    public function setUp()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->message = new Message('someText');
    }

    public function testType()
    {
        $message = &$this->message;

        $type = __METHOD__;
        $message->setType($type);

        $this->assertEquals($type, $message->getType(), 'setType()/getType() is not working.');
    }

    public function testMessage()
    {
        $message = &$this->message;

        $text = __METHOD__;
        $message->setMessage($text);

        $this->assertEquals($text, $message->getMessage(), 'setMessage()/getMessage() is not working.');
    }

    public function testField()
    {
        $message = &$this->message;

        $field = __METHOD__;
        $message->setField($field);

        $this->assertEquals($field, $message->getField(), 'setField()/getField() is not working.');
    }

    public function testJob()
    {
        $message = &$this->message;

        $jobMock = m::mock(JobInterface::class);

        $message->setJob($jobMock);

        $this->assertEquals($jobMock, $message->getJob(), 'setJob()/getJob() is not working.');
    }

    public function testCode()
    {
        $message = &$this->message;

        $code = rand(111, 999);
        $message->setCode($code);

        $this->assertEquals($code, $message->getCode(), 'setCode()/getCode() is not working.');
    }

    public function testConstruct()
    {
        unset($this->message);

        $jobMock = m::mock(JobInterface::class);

        $message = new Message('someText', 'someField', 'someType', $jobMock, 228);
        $this->assertEquals('someText', $message->getMessage(), '__construct () did not set the message text.');
        $this->assertEquals('someField', $message->getField(), '__construct () did not set the message field.');
        $this->assertEquals('someType',  $message->getType(), '__construct () did not set the message type.');
        $this->assertEquals($jobMock, $message->getJob(), '__construct () did not set the job object.');
        $this->assertEquals(228, $message->getCode(), '__construct () did not set the code.');
    }

    public function tearDown()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        unset($this->message);
    }
}